<?xml version="1.0" encoding="UTF-8"?>

<?LaTeX ExtraPreamble="\usepackage{graphicx}"?>

<!DOCTYPE Book SYSTEM "gapdoc.dtd" [
 <!ENTITY see '<Alt Only="LaTeX">$\to$</Alt><Alt Not="LaTeX">--&tgt;</Alt>'>
 <#Include Label="Version">
]>
<Book Name="IMG">

<TitlePage>
  <Title>Iterated monodromy groups</Title>
  <Version>Version &Version;</Version>
  <TitleComment>
    Groups and dynamical systems
  </TitleComment>
  <Author>Laurent Bartholdi
	  <Email><Alt Only="HTML">laurent dot bartholdi at gmail dot com</Alt>
		 <Alt Not="HTML">laurent.bartholdi@gmail.com</Alt></Email>
	  <Homepage>http://www.uni-math.gwdg.de/laurent/</Homepage>
  </Author>
  <Date>&Date;</Date>
  <Address>
  Mathematisches Institut<Br/>Bunsenstraße 3-5<Br/>D-37073 Göttingen<Br/>Germany
  </Address>
  <Abstract>
    This document describes the package <Package>IMG</Package>, which
    implements in &GAP; the iterated monodromy groups of Nekrashevych. It
    depends on the package <Package>FR</Package>.
  <Alt Only="HTML">
  <P/>
  The computer algebra system &GAP; is available at
  <URL>https://gap-system.org</URL>.
  <P/>
  This documentation for <Package>IMG</Package> is available at
  <URL>https://gap-packages.github.io/img/doc/manual.pdf</URL> in PDF
  format, and may be accessed online at
  <URL>https://gap-packages.github.io/img/</URL>.
  <P/>
  The latest release of the package may be downloaded as
  <URL>https://github.com/gap-packages/img/releases/download/v&Version;/IMG-&Version;.tar.gz</URL> (tar, gzipped).
  The latest repository version (possibly unstable) may be downloaded as
  <URL>https://github.com/gap-packages/img/tarball/master</URL> (tar, gzipped),
  <URL>https://github.com/gap-packages/img.git</URL> (git repository), or
  explored at <URL>https://github.com/gap-packages/img/tree/master/</URL>.
  </Alt>
  <P/>
    For comments or questions on <Package>IMG</Package> please contact
    the author; this package is still under development.
  </Abstract>
  <Copyright>&copyright; 2006-2013 by Laurent Bartholdi
  </Copyright>
  <Acknowledgements>Part of this work is/was supported by the
  "German Science Foundation".
  </Acknowledgements>
  <Colophon>
  This project started as a part of the &GAP; package <Package>FR</Package>.
  It expanded so much that I decided in 2012 to split it off, so as to
  keep more cleanly separated the group theory on one side, and the
  complex analysis, on the other side.
  </Colophon>

</TitlePage>

<TableOfContents/>

<Body>

<Chapter><Heading>Licensing</Heading>

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or any
later version.

<P/> This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

<P/> You should have received a copy of the GNU General Public
License along with this program, in the file COPYING.  If not, see
<URL>https://www.gnu.org/licenses/</URL>.

</Chapter>

<Chapter Label="imgpackage"><Heading>IMG package</Heading>

<Section Label="mathintro"><Heading>A brief mathematical introduction</Heading>
This chapter assumes that you have no familiarity with iterated
monodromy groups. If you do, and wish to see their usage within &GAP;
through a sample session, please skip to Section <Ref
Label="imgintro"/>.  For a more thourough introduction on self-similar
groups and iterated monodromy groups, see <Cite Key="MR2091700"/> or
<Cite Key="MR2162164"/>.

<P/> Basic knowledge of the package <Package>FR</Package> is assumed,
however. Please refer to its online documentation, or the same
references as above.

<P/> The fundamental objects are <E>Thurston maps</E>: branched
self-coverings of the sphere <M>S^2</M>. These are continuous maps
<M>f:S^2\to S^2</M> that, locally, are modelled on the complex map
<M>z\mapsto z^n</M>. The <E>critical points</E> are those points
<M>z</M> at which the map is modelled on <M>z\mapsto z^n</M> for some
<M>n&gt;1</M>. The <E>post-critical set</E> is the union <M>P</M> of
strictly forward orbits of critical points. It is assumed finite.

<P/> Two Thurston maps <M>f:(S^2,P)\to(S^2,P)</M> and
<M>g:(S^2,Q)\to(S^2,Q)</M> are <E>combinatorially equivalent</E> if
they are isotopic through isotopies <M>(S^2,P)\to(S^2,Q)</M> that are
constant on <M>P</M>.

<P/> Denote by <M>G</M> the fundamental group <M>\pi_1(S^2\setminus
P,*)</M> at a basepoint <M>*</M>. Then combinatorial equivalence
classes of Thurston maps are classified by wreath recursions for
<M>G</M>, namely homomorphisms <M>\phi:G\to G\wr
\mathop{Sym}_d</M>. They are encoded, in <Package>IMG</Package>, by a
new kind of FR machine, called a <E>sphere machine</E>.  Generators of
the machine correspond to loops in the fundamental group of the sphere
(punctured at post-critical points), that circle once
counter-clockwise around a post-critical point.

<P/> By a fundamental theorem of Thurston, every Thurston map (apart
from a few low-complexity examples) is either combinatorially
equivalent to a rational map, or is <E>obstructed</E>: there exists a
system of curves on <M>S^2\setminus P</M> with some appropriate
non-contraction property.

<P/> The operations in this package let one manipulate Thurston maps,
and in particular
<List>
<Item> compute the rational map, or the obstruction, associated with a sphere machine;</Item>
<Item> compute the sphere machine associated with a rational map;</Item>
<Item> construct sphere machines algebraically, and identify their combinatorial parameters, in the case of polynomial maps;</Item>
<Item> compute combinations of sphere machines, such as matings.</Item>
</List>
</Section>

<Section Label="imgintro"><Heading>An example session</Heading>
This is a brief introduction describing some of the simpler features
of the <Package>IMG</Package> package. It assumes you have some
familiarity with the theory of groups defined by automata, and of
holomorphic dynamical systems; if not, a brief mathematical
introduction may be found in Section <Ref Label="mathintro"/>. We show
here and comment a typical use of the package.

<P/> The package is installed by unpacking the archive in the
<File>pkg/</File> directory of your &GAP; installation. It can also be
placed in a local directory, which must be added to the load-path by
invoking <C>gap</C> with the <C>-l</C> option.

<Example><![CDATA[
gap> LoadPackage("img");
true
]]></Example>

Many maps and sphere machines are predefined by the
<Package>IMG</Package>, see Chapter <Ref Label="imgexamples"/>.

<P/> We may start by defining a machine by its polynomial:
<Example><![CDATA[
gap> basilica := PolynomialSphereMachine(2,[1/3]);
<sphere machine with alphabet [ 1 .. 2 ] and adder FRElement(...,f3) on Group( [ f1, f2, f3 ] )/[ f\
3*f2*f1 ]>
gap> Display(basilica);
 G  |      1         2
----+---------+---------+
 f1 | f1^-1,2   f3^-1,1
 f2 |    f1,1    <id>,2
 f3 |    f3,2    <id>,1
----+---------+---------+
Adding element: FRElement(...,f3)
Relators: [ f3*f2*f1 ]
gap> P1MapBySphereMachine(basilica);
<z^2-1._z>
]]></Example>
We have just created the basilica machine, with group <M>G=\langle f1,f2,f3|f3f2f1\rangle</M>, and computed the corresponding rational map.

<P/> We now compute the mating of the basilica with itself: that is
the Thurston map which acts as <M>z^2-1</M> on the upper hemisphere,
by angle doubling on the equator, and also as <M>z^2-1</M> on the
lower hemisphere. It turns out that this map is obstructed, i.e. does
not have a realization as a rational map. The obstruction consists of
a curve separating the points <M>-1</M> and <M>0</M> on both
hemispheres:
<Example><![CDATA[
gap> basilica2 := Mating(basilica,basilica);
<sphere machine with alphabet [ 1 .. 2 ] on Group( [ f1, f2, g1, g2 ] ) / [ f2*f1*g2*g1 ]>
gap> P1MapBySphereMachine(last);
rec(
  machine := <sphere machine with alphabet [ 1, 2 ] on Group( [ f1, f2, g1, g2 ] ) / [ f2*f1*g2*g1 \
]>, matrix := [ [ 1 ] ], multicurve := [ f1*g1^G ] )
]]></Example>
</Section>

</Chapter>

<Chapter Label="sphere"><Heading>Sphere groups and machines</Heading>

<Section><Heading>Sphere groups</Heading>
Fundamental groups of punctured spheres, and of sphere orbifolds, are
defined in <Package>IMG</Package> as a special class of finitely
presented groups. The generators of the group represent the punctures
of the sphere, or more generally its orbispace points.

<#Include Label="SphereGroups">
</Section>

<Section><Heading>Sphere machines</Heading>
Sphere machines are simply group FR machines (see Section <Ref
Label="FRMachine" BookName="FR"/>) whose underlying <Ref
Oper="StateSet" BookName="FR"/> is a sphere group.

<#Include Label="SphereMachine">
</Section>

<Section><Heading>Polynomial sphere machines</Heading>
Polynomial sphere machines have a special extra attribute, an <Ref
Attr="AddingElement"/>. This is an element of the underlying FR group,
which acts as an adding element on the machine's alphabet. It
represents a fixed point of a Thurston map of maximal ramification;
typically, the point <M>\infty</M> of a polynomial.

<#Include Label="SphereOperations">

<#Include Label="PolynomialFRMachine">

<#Include Label="RotatedSpider">

<#Include Label="Conversions">
</Section>

<Section><Heading>Automorphisms of sphere machines</Heading>
Consider a sphere group <M>G</M> and its automorphism group
<M>A</M>. If <M>M</M> is a sphere machine for the group <M>G</M>, then
pre- and post-composition by automorphisms in <M>A</M> gives new
sphere machines. The set of such sphere machines is naturally
described by a machine for the group <M>A</M>.

<#Include Label="AutomorphismsFRMachines">
</Section>

</Chapter>

<Chapter><Heading>Holomorphic maps</Heading>

A large part of <Package>IMG</Package> consists of code that
manipulates rational maps and complex coordinates on spheres.

<Section><Heading><M>\mathbb P^1</M> points</Heading>
Points on the sphere are represented by complex numbers, possibly
infinity. These complex numbers are encapsulated in <Ref
Oper="P1Point"/> objects.

<#Include Label="P1Points">
</Section>

<Section><Heading>Triangulations</Heading>
The next objects are finite triangulations of the sphere. They are
represented by lists of points, edges and faces, and all adjacency
relations between them. Each point, edge and face has a <Ref
Oper="P1Point"/> as position, and furthermore edges come with a
parametrization <M>\gamma([0,1])</M> for a Möbius transformation
<M>\gamma</M>.

<#Include Label="Triangulations">
</Section>

<Section><Heading>Marked spheres</Heading>

Marked spheres should be thought of as punctured complex spheres, with
a explicit identification of a sphere group with their fundamental
group. They model points in Teichmüller space.

<P/> Marked spheres are given by a triangulation and a sphere group
whose generators are in bijection with the triangulation's
vertices. Internally, the marked sphere keeps track of a group element
at each edge, stored as <C>GroupElement(e)</C>. This is the group
element by which one should multiply as the edge is crossed
transversally. In particular, the product of the edges going out of
vertex <M>v</M> is conjugate to generator number <M>v</M>.

<P/> Given a marked sphere and a rational map (given by coefficients),
a procedure computes the "lifted marked sphere" and a wreath recursion
between their respective groups, i.e. a homomorphism <M>G_0 \to G_1
\wr \mathop{Sym}(d)</M>. The procedure will probably fail unless the
critical values are close to the feet. There, the algorithm is already
subtle: edges of the dual graph are represented by arcs of great
circles.

<P/> One first computes the full preimage of the feet, and a
triangulation spanning them on a sphere "above" the original marked
sphere. Then, for each edge of the "down" dual graph, its preimage on
the "up" sphere is an algebraic curve. One computes its intersections
with all edges of the "up" dual graph, by finding zeroes of real
polynomials, to determine from which triangle to which one the lifted
edges go.

<P/> Because of rounding errors, one has to be careful as to when a
real polynomial is supposed to have a zero, or when a point is
supposed to be in a triangle. E.g., if <M>T</M> is a triangle and its
sides are given by arcs of great circles, represented as
<M>\gamma_i([0,1])</M> for Möbius maps <M>\gamma_i, i=1,2,3</M>, then
the test <M>\Im(\gamma_i(z))&gt;0 \forall i</M> determines whether
<M>z</M> is in the triangle. This test is really coded as
<M>\Im(\gamma_i(z)) / (1+|\gamma_i(z)|^2) &gt; -@IMG.p1eps</M> to take
care of rounding errors.

<#Include Label="MarkedSpheres">
</Section>

<Section><Heading>The Hurwitz problem</Heading>
Given a marked sphere and a permutation representation of its group, a
procedure computes a rational map with that monodromy. If the
representation has degree <M>2</M>, or is bicritical, or a few other cases
easily coded by hand, then the rational map is computed
algebraically.

<P/> Otherwise, the "hard" part of the algorithm comes into play. A
fresh marked sphere is constructed with only the feet with non-trivial
permutation. The triangulation is then combinatorially lifted, using
the permutation representation. In particular, the feet are now
labeled by cycles of the permutations. It is a purely combinatorial
triangulation, at this point; but one remembers that its edges have a
length inherited from the sphere metric. The triangulation is then
refined by repeatedly adding circumcentres of triangles, till every
edge (say from <M>v</M> to <M>w</M>) has length <M>\le
@IMG.hurwitzmesh ^ Maximum(cycle length at v, cycle length at w)</M>.

<P/> Now an external C program, "layout", is called. It seeks a
discrete conformal map, given by a function <M>u: \{feet\} \to \mathbb
R</M>, such that if edge <M>e</M> (from <M>v</M> to <M>w</M>) has its
length scaled by <M>u(v)\cdot u(w)</M> then the
sum-of-angles=2<M>\pi</M> condition holds at each vertex (with special
treatment for a vertex at infinity; I skip details). Then the
triangulation can be laid out on the plane, and projected back
stereographically to the sphere. In this manner, we got good
approximations of where the feet should be.

<P/> Now we run Newton's method on the feet positions, using as
variables the lifted-feet positions. This is the external program
"hsolve". It is assumed that the down-feet contain <M>0</M> and
<M>\infty</M>, so that the rational map we are looking for is of the
form <M>f(z) = C\cdot\prod(z-c_i)^{d_i}</M> for known integers
<M>d_i</M>. The <M>c_i</M> are the lifted-feet above <M>0</M> and
<M>\infty</M>, and the equations in Newton's method say that the
log-derivative of <M>f</M> must vanish at appropriate lifted-feet, and
that <M>f</M> must map these lifted-feet to the down-feet.

<#Include Label="Hurwitz">
</Section>

<Section><Heading>The spider algorithm</Heading>

<Package>IMG</Package> implements an algorith, extending the
Thurston-Hubbard-Schleicher "spider algorithm" <Cite Key="MR1315537"/>
that constructs a rational map from an IMG recursion. This
implementation does not give rigourous results, but relies of
floating-point approximation. In particular, various floating-point
parameters control the proper functioning of the algorithm. They are
stored in a record, <C>IMG@</C>. Their meaning and default values
are:<List>
<Mark><C>EPS@fr.mesh := 10^-1</C></Mark> <Item> If points on the unit sphere
  are that close, the triangulation mesh should be refined.</Item>
<Mark><C>EPS@fr.p1eps := 10^-8</C></Mark> <Item> If points on the unit
  sphere are that close, they are considered equal.</Item>
<Mark><C>EPS@fr.obst := 10^-1</C></Mark> <Item> If points on the unit sphere
  are that close, they are suspected to form a Thurston obstruction.</Item>
<Mark><C>EPS@fr.fast := 10^-1</C></Mark> <Item> If the spider moved
  less than that amount in the last iteration, try speeding up by
  only wiggling the spider's legs, without recomputing it.</Item>
<Mark><C>EPS@fr.ratprec := 10^-8</C></Mark> <Item> The minimal
  acceptable precision on the coefficients of the rational function.</Item>
</List>

For Thurston's algorithm, one starts by an arbitrary marked sphere (I
chose its feet on the real axis, at equal small angles); computes a
rational map using <Ref Oper="BranchedCoveringByMonodromy"/>, computes
its sphere machine using <Ref
Oper="SphereMachineOfBranchedCovering"/>, and matches the original
sphere machine with the lifted one. This tells us which feet of the
lifted marked sphere we should keep.

<P/> One then computes a normalized position for the sub-marked
sphere: its last foot is put at <M>\infty</M>, another one (chosen
cleverly) is on the positive real axis, and the center of mass of all
feet (in <M>\mathbb R^3</M>) is <M>(0,0,0)</M>. This is much more
stable, numerically, than putting three points at
<M>0,1,\infty</M>. One has a Möbius transformation that puts the
sub-marked sphere in normalized position, and again using <Ref
Oper="SphereMachineOfBranchedCovering"/> one computes its machine. One
then composes the machines, and compares the product again to the
original machine to determine the marking of the edges of the new
marked sphere by group elements.

<P/> Then, one searches for all quadruples with large cross-ratio, and
computes group-theoretically the curve separating the post-critical
set in two parts that are well separated. One saturates the resulting
curve into an invariant multicurve (aborting if there is an
intersection between lifts), computes the Thurston matrix, and finds
out (again algebraically) if there is an eigenvalue <M>\geq
1</M>. There is no parameter in this part of the code, all quadruples
are examined; this is a weakness of the current implementation,
sometimes most of the computational time is spent on searching for
obstructions when it's "clear" there are none.

<P/> The distance between two marked spheres (marked by the same
group) is computed as follows: if their feet are close in the sense
that the sum of the spherical distances between them is less that
<C>@IMG.fast</C>, then wiggle one of the spiders to make its feet
match that of the other; and check that the identity map gives, by
<Ref Oper="SphereMachineOfBranchedCovering"/>, the identity
machine. In that case, the sum of the feet distances is the distance
between the spheres. Otherwise, add to it some formula involving the
entries in the biset, which gives large integer distances.

<P/> The Thurston algorithm stops when an obstruction is found or when
the marked sphere moved less than <C>@IMG.ratprec</C>. Inside the main
iteration of the algorithm, if the spider moved less that
<C>@IMG.fast</C>, then don't compute the branched covering by
monodromy, and don't compute the bisets; but just adjust the branched
covering and the vertex positions of the spheres, guessing which ones
should be kept. Check the guess: if it is incorrect, go back to the
usual slow method.

<#Include Label="Thurston">
</Section>

</Chapter>

<Chapter Label="imgexamples"><Heading>Examples</Heading>
<Package>IMG</Package> predefines a large collection of sphere
machines, as well as the generic constructions of polynomials.

<Section><Heading>Examples of groups</Heading>
<#Include Label="Poirier">
<#Include Label="DBRationalIMGGroup">
</Section>

</Chapter>

<Chapter><Heading>Miscellanea</Heading>

<Section><Heading>Complex numbers</Heading>
<#Include Label="complexnumbers">
</Section>

<Section><Heading>Helpers</Heading>
<#Include Label="Helpers">
</Section>

<Section><Heading>User settings</Heading>
<ManSection>
  <InfoClass Name="InfoIMG"/>
  <Description>
    This is  an <K>Info</K> class for the package <Package>IMG</Package>.
    The command <C>SetInfoLevel(InfoIMG,1);</C> switches on the printing of
    some information during the computations of certain
    <Package>IMG</Package> functions; in particular all automatic
    conversions between IMG machines and Mealy machines.

    <P/> The command <C>SetInfoLevel(InfoIMG,2);</C> requests a little
    more information, and in particular prints intermediate results in
    potentially long calculations such as...

    <P/> The command <C>SetInfoLevel(InfoIMG,3);</C> ensures that
    <Package>IMG</Package> will print information every few seconds or
    so. This is useful to gain confidence that the program is not
    stuck due to a programming bug by the author of
    <Package>IMG</Package>.
  </Description>
</ManSection>
</Section>

</Chapter>

</Body>

<Bibliography Databases="imgbib.xml"/>
<TheIndex/>

</Book>
